import type { NextPage } from "next";
import Head from "next/head";
import { useState, ChangeEvent } from "react";
import Image from "next/image";
import image from "../image/bg.jpg";

import QuestionCard from "../components/QuestionCard";
import { fetchQuizQuestions, Difficulty, QuestionsState } from "../api/API";

export type AnswerObject = {
  question: string;
  answer: string;
  correct: boolean;
  correctAnswer: string;
};

const Home: NextPage = () => {
  const [loading, setLoading] = useState(false);
  const [questions, setQuestions] = useState<QuestionsState[]>([]);
  const [number, setNumber] = useState(0);
  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);
  const [score, setScore] = useState(0);
  const [gameOver, setGameOver] = useState(true);
  const [difficulty, setDifficulty] = useState<string>("");
  const [totalQuestions, setTotalQuestions] = useState<number>(10);

  console.log(questions);

  const startTrivia = async () => {
    setLoading(true);
    setGameOver(false);
    if (difficulty === "easy") {
      const newQuestions = await fetchQuizQuestions(
        totalQuestions,
        Difficulty.EASY
      );
      setQuestions(newQuestions);
      setScore(0);
      setUserAnswers([]);
      setNumber(0);
      setLoading(false);
    } else if (difficulty === "medium") {
      const newQuestions = await fetchQuizQuestions(
        totalQuestions,
        Difficulty.MEDIUM
      );
      setQuestions(newQuestions);
      setScore(0);
      setUserAnswers([]);
      setNumber(0);
      setLoading(false);
    } else if (difficulty === "hard") {
      const newQuestions = await fetchQuizQuestions(
        totalQuestions,
        Difficulty.HARD
      );
      setQuestions(newQuestions);
      setScore(0);
      setUserAnswers([]);
      setNumber(0);
      setLoading(false);
    } else {
      const newQuestions = await fetchQuizQuestions(
        totalQuestions,
        Difficulty.EASY
      );
      setQuestions(newQuestions);
      setScore(0);
      setUserAnswers([]);
      setNumber(0);
      setLoading(false);
    }
  };

  const checkAnswers = (e: any) => {
    if (!gameOver) {
      // User's answer
      const answer = e.currentTarget.value;
      // Check answer against correct answer
      const correct = questions[number].correct_answer === answer;
      // Add score if answer is correct
      if (correct) setScore((prev) => prev + 1);
      // Save the answer in the array for user answers
      const answerObject = {
        question: questions[number].question,
        answer,
        correct,
        correctAnswer: questions[number].correct_answer,
      };
      setUserAnswers((prev) => [...prev, answerObject]);
    }
  };
  const nextQuestion = () => {
    // Move on to the next question if not the last question
    const nextQ = number + 1;

    if (nextQ === totalQuestions) {
      setGameOver(true);
    } else {
      setNumber(nextQ);
    }
  };

  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setTotalQuestions(Number(event.target.value));
  };

  return (
    <div className="bg-black relative text-white">
      <Head>
        <title>Quiz App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col absolute z-50 h-4/6 w-full items-center justify-center">
        <main className="w-full  max-w-sm mx-auto md:max-w-lg lg:max-w-xl xl:max-w-3xl">
          <div className="grid place-items-center mt-32">
            <h1 className="text-6xl text-center font-medium uppercase my-4 tracking-widest">
              Quiz App
            </h1>

            {gameOver || userAnswers.length === totalQuestions ? (
              <div className="w-full my-4">
                <input
                  min={5}
                  max={100}
                  type="number"
                  placeholder="total Question"
                  name="totalQuestion"
                  value={totalQuestions}
                  onChange={handleChange}
                  className="text-white bg-black bg-opacity-50 h-10 cursor-pointer w-full mb-4 tracking-widest"
                />
                <div className="w-full">
                  <select
                    name=""
                    className="text-white bg-black bg-opacity-50 h-10 cursor-pointer w-full tracking-widest"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                  >
                    <option
                      value=""
                      selected
                      disabled
                      className="cursor-pointer tracking-widest  font-bold text-blue-200"
                    >
                      Pick Difficulty
                    </option>
                    <option
                      className="cursor-pointer tracking-widest"
                      value="easy"
                    >
                      Easy
                    </option>
                    <option
                      className="cursor-pointer tracking-widest"
                      value="medium"
                    >
                      Medium
                    </option>
                    <option
                      className="cursor-pointer tracking-widest"
                      value="hard"
                    >
                      Hard
                    </option>
                  </select>
                </div>
              </div>
            ) : null}

            {gameOver || userAnswers.length === totalQuestions ? (
              <button
                className="bg-black w-full xl:w-1/2 px-1 py-2 rounded-xl bg-opacity-50  font-bold uppercase"
                onClick={startTrivia}
              >
                Start
              </button>
            ) : null}
          </div>
          {!gameOver ? (
            <p className="text-center text-xl font-bold">Score: {score}</p>
          ) : null}
          {loading ? (
            <p className="text-center text-xl">Loading Questions...</p>
          ) : null}
          {!loading && !gameOver && (
            <QuestionCard
              quesntionNo={number + 1}
              totalQuestions={totalQuestions}
              question={questions[number].question}
              answer={questions[number].answers}
              userAnswer={userAnswers ? userAnswers[number] : undefined}
              callback={checkAnswers}
            />
          )}
          <div className="flex flex-col items-center justify-center">
            {!gameOver &&
            !loading &&
            userAnswers.length === number + 1 &&
            number !== totalQuestions - 1 ? (
              <button
                className="bg-black w-full xl:w-1/2 px-1 py-2 rounded-xl bg-opacity-50  font-bold uppercase"
                onClick={nextQuestion}
              >
                Next Question
              </button>
            ) : null}
          </div>
        </main>
      </div>
      <div className="w-full h-screen">
        <Image src={image} layout="fill" objectFit="cover" />
      </div>
    </div>
  );
};

export default Home;
